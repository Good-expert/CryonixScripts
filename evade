if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- ============== UI Library ==============
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Confirmed = true

repeat task.wait() until Confirmed 

-- ============== UI Themes ==============
WindUI:AddTheme({ Name = "Dark", Accent = "#18181b", Dialog = "#18181b", Outline = "#FFFFFF", Text = "#FFFFFF", Placeholder = "#999999", Background = "#0e0e10", Button = "#52525b", Icon = "#a1a1aa" })
WindUI:AddTheme({ Name = "Light", Accent = "#f4f4f5", Dialog = "#f4f4f5", Outline = "#000000", Text = "#000000", Placeholder = "#666666", Background = "#ffffff", Button = "#e4e4e7", Icon = "#52525b" })
WindUI:AddTheme({ Name = "Gray", Accent = "#374151", Dialog = "#374151", Outline = "#d1d5db", Text = "#f9fafb", Placeholder = "#9ca3af", Background = "#1f2937", Button = "#4b5563", Icon = "#d1d5db" })
WindUI:AddTheme({ Name = "Blue", Accent = "#1e40af", Dialog = "#1e3a8a", Outline = "#93c5fd", Text = "#f0f9ff", Placeholder = "#60a5fa", Background = "#1e293b", Button = "#3b82f6", Icon = "#93c5fd" })
WindUI:AddTheme({ Name = "Green", Accent = "#059669", Dialog = "#047857", Outline = "#6ee7b7", Text = "#ecfdf5", Placeholder = "#34d399", Background = "#064e3b", Button = "#10b981", Icon = "#6ee7b7" })
WindUI:AddTheme({ Name = "Purple", Accent = "#7c3aed", Dialog = "#6d28d9", Outline = "#c4b5fd", Text = "#faf5ff", Placeholder = "#a78bfa", Background = "#581c87", Button = "#8b5cf6", Icon = "#c4b5fd" })
WindUI:AddTheme({ Name = "Red", Accent = "#dc2626", Dialog = "#b91c1c", Outline = "#fca5a5", Text = "#fef2f2", Placeholder = "#f87171", Background = "#7f1d1d", Button = "#ef4444", Icon = "#fca5a5" })
WindUI:AddTheme({ Name = "Midnight Blue", Accent = "#1e3a8a", Dialog = "#1e40af", Outline = "#60a5fa", Text = "#dbeafe", Placeholder = "#3b82f6", Background = "#0c1e3e", Button = "#2563eb", Icon = "#93c5fd" })
WindUI:AddTheme({ Name = "Crimson", Accent = "#b91c1c", Dialog = "#991b1b", Outline = "#f87171", Text = "#fef2f2", Placeholder = "#ef4444", Background = "#450a0a", Button = "#dc2626", Icon = "#fca5a5" })
WindUI:AddTheme({ Name = "Royal Purple", Accent = "#6b21a8", Dialog = "#581c87", Outline = "#d8b4fe", Text = "#faf5ff", Placeholder = "#c084fc", Background = "#3b0764", Button = "#7c3aed", Icon = "#e9d5ff" })
WindUI:SetNotificationLower(true)

local themes = {"Dark", "Light", "Gray", "Blue", "Green", "Purple", "Red", "Midnight Blue", "Crimson", "Royal Purple"}
local currentThemeIndex = 1

if not getgenv().TransparencyEnabled then
    getgenv().TransparencyEnabled = false
end

-- ============== Window Creation ==============
local Window = WindUI:CreateWindow({
    Title = "Evade",
    Icon = "zap", 
    Author = "by Cryonix team",
    Folder = "Cryonix_Evade",
    Size = UDim2.fromOffset(600, 500),
    Transparent = getgenv().TransparencyEnabled,
    Theme = "Midnight Blue",
    Resizable = true,
    SideBarWidth = 150,
    HideSearchBar = false,
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            currentThemeIndex = (currentThemeIndex % #themes) + 1
            local newTheme = themes[currentThemeIndex]
            WindUI:SetTheme(newTheme)
            WindUI:Notify({ Title = "Theme Changed", Content = "Switched to " .. newTheme .. " theme!", Duration = 1.5, Icon = "palette" })
        end,
    },
})

Window:SetToggleKey(Enum.KeyCode.RightShift)
Window:CreateTopbarButton("TransparencyToggle", "eye", function() getgenv().TransparencyEnabled = not getgenv().TransparencyEnabled; Window:ToggleTransparency(getgenv().TransparencyEnabled) end, 990)
Window:EditOpenButton({ Title = "Cryonix", Icon = "zap", CornerRadius = UDim.new(0, 8), StrokeThickness = 2, Color = ColorSequence.new(Color3.fromRGB(138, 43, 226), Color3.fromRGB(173, 216, 230)), Draggable = true })

--[[ SCRIPT LOGIC ]]--
local Players, ReplicatedStorage, RunService, UserInputService, Lighting, VirtualUser, TeleportService, LocalPlayer, WorkspacePlayers = game:GetService("Players"), game:GetService("ReplicatedStorage"), game:GetService("RunService"), game:GetService("UserInputService"), game:GetService("Lighting"), game:GetService("VirtualUser"), game:GetService("TeleportService"), game:GetService("Players").LocalPlayer, workspace.Game.Players
local UIElements, DefaultConfig = {}, {
    EntityESP = false, EntityESPColor = Color3.fromRGB(255, 0, 0), EntityDistance = true,
    PlayerESP = false, PlayerESPColor = Color3.fromRGB(0, 255, 0), PlayerNames = true, PlayerDistance = true, PlayerHealth = true,
    SkinChanger = false, SelectedSkin = "Dawn", CustomSkinEnabled = false,
    CustomSkinProps = { HeadColor = Color3.fromRGB(255, 204, 153), TorsoColor = Color3.fromRGB(255, 0, 0), LeftArmColor = Color3.fromRGB(255, 204, 153), RightArmColor = Color3.fromRGB(255, 204, 153), LeftLegColor = Color3.fromRGB(0, 0, 255), RightLegColor = Color3.fromRGB(0, 0, 255), HeadMaterial = Enum.Material.Plastic, BodyMaterial = Enum.Material.Plastic },
    AutoCollect = false, AutoRevive = false,
    SpeedHack = false, SpeedMultiplier = 2, JumpHack = false, JumpMultiplier = 2,
    Fullbright = false, NoCooldowns = false, AntiRagdoll = false, AutoCrouch = false, AntiAFK = true,
    MoneyFarm = false, AFKFarm = false, TicketFarm = false, AutoRespawn = false, Fly = false, FlySpeed = 50,
    DownedPlayerESP = false, TicketESP = false, BotESP = false, DownedPlayerColor = Color3.fromRGB(255,0,0),
}
local Config = DefaultConfig
local entityESPObjects, playerESPObjects, ticketESPObjects = {}, {}, {}; local entityESPConnection, playerESPConnection, ticketESPConnection, skinChangerConnection, autoCollectConnection, autoReviveConnection, speedHackConnection, jumpHackConnection, antiRagdollConnection, autoCrouchConnection, antiAFKConnection
local originalLightingSettings = { Brightness = Lighting.Brightness, ClockTime = Lighting.ClockTime, FogEnd = Lighting.FogEnd, GlobalShadows = Lighting.GlobalShadows, Ambient = Lighting.Ambient }

-- Helper Functions
function IsAlive(player) return player and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 end
function GetPlayerPosition() return LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position end
function GetDistanceFromPlayer(position) local playerPos = GetPlayerPosition(); return playerPos and (position - playerPos).Magnitude or 0 end
function GetEntities() local entities = {}; local entityFolders = { workspace:FindFirstChild("Entities"), workspace:FindFirstChild("Monsters"), workspace:FindFirstChild("Bots"), WorkspacePlayers }; if workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Entities") then table.insert(entityFolders, workspace.Game.Entities) end; for _, folder in pairs(entityFolders) do if folder then for _, entity in pairs(folder:GetChildren()) do if entity:IsA("Model") and entity:FindFirstChild("HumanoidRootPart") and not Players:GetPlayerFromCharacter(entity) then table.insert(entities, entity) end end end end; return entities end
function GetDownedPlr() for i,v in pairs(WorkspacePlayers:GetChildren()) do if v:GetAttribute("Downed") then return v end end end

-- ESP Implementation
function CreateEntityESP(entity) local entityId = entity:GetFullName(); if entityESPObjects[entityId] then return end; entityESPObjects[entityId] = { Box = Drawing.new("Square"), Name = Drawing.new("Text"), Distance = Drawing.new("Text") }; local esp = entityESPObjects[entityId]; esp.Box.Thickness, esp.Box.Filled = 2, false; esp.Name.Size, esp.Name.Center, esp.Name.Outline, esp.Name.Font, esp.Name.Text = 18, true, true, 2, entity.Name; esp.Distance.Size, esp.Distance.Center, esp.Distance.Outline, esp.Distance.Font = 16, true, true, 2 end
function UpdateEntityESP() for _, entity in pairs(GetEntities()) do if entity:FindFirstChild("HumanoidRootPart") and not entityESPObjects[entity:GetFullName()] then CreateEntityESP(entity) end end; for entityId, espItems in pairs(entityESPObjects) do local entity = game:FindFirstChild(entityId, true); if not entity or not entity:FindFirstChild("HumanoidRootPart") then for _, item in pairs(espItems) do item:Remove() end entityESPObjects[entityId] = nil else local rootPart = entity.HumanoidRootPart; local headPos = rootPart.Position + Vector3.new(0, 2, 0); local rootScreenPos, rootOnScreen = workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position); local headScreenPos, headOnScreen = workspace.CurrentCamera:WorldToScreenPoint(headPos); local onScreen = rootOnScreen or headOnScreen; for _, item in pairs(espItems) do item.Visible = onScreen end; if not onScreen then continue end; local boxSizeY = math.abs(headScreenPos.Y - rootScreenPos.Y); local boxSizeX = boxSizeY / 2; espItems.Box.Size = Vector2.new(boxSizeX, boxSizeY); espItems.Box.Position = Vector2.new(rootScreenPos.X - boxSizeX / 2, headScreenPos.Y); espItems.Name.Position = Vector2.new(headScreenPos.X, headScreenPos.Y - 20); espItems.Distance.Position = Vector2.new(rootScreenPos.X, rootScreenPos.Y + 5); espItems.Distance.Text = math.floor(GetDistanceFromPlayer(rootPart.Position)) .. "m"; espItems.Box.Color, espItems.Name.Color, espItems.Distance.Color = Config.EntityESPColor, Config.EntityESPColor, Config.EntityESPColor; espItems.Distance.Visible = Config.EntityDistance end end end
function EnableEntityESP(state) if state then entityESPConnection = RunService.RenderStepped:Connect(UpdateEntityESP) else if entityESPConnection then entityESPConnection:Disconnect(); entityESPConnection = nil end for id, items in pairs(entityESPObjects) do for _, item in pairs(items) do item:Remove() end end entityESPObjects = {} end end
function CreatePlayerESP(player) if playerESPObjects[player.Name] then return end; playerESPObjects[player.Name] = { Box = Drawing.new("Square"), Name = Drawing.new("Text"), Distance = Drawing.new("Text"), Health = Drawing.new("Line") }; local esp = playerESPObjects[player.Name]; esp.Box.Thickness, esp.Box.Filled = 1, false; esp.Name.Size, esp.Name.Center, esp.Name.Outline, esp.Name.Font = 18, true, true, 2; esp.Distance.Size, esp.Distance.Center, esp.Distance.Outline, esp.Distance.Font = 16, true, true, 2; esp.Health.Thickness = 3 end
function UpdatePlayerESP() for _, player in pairs(Players:GetPlayers()) do if player ~= LocalPlayer then if not playerESPObjects[player.Name] then CreatePlayerESP(player) end; local espItems = playerESPObjects[player.Name]; local character = player.Character; local isVisible = character and IsAlive(player) and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Head"); for _, item in pairs(espItems) do item.Visible = isVisible end; if not isVisible then continue end; local rootPart, head, humanoid = character.HumanoidRootPart, character.Head, character.Humanoid; local rootPos, headPos = rootPart.Position, head.Position; local rootScreenPos, rootOnScreen = workspace.CurrentCamera:WorldToScreenPoint(rootPos); local headScreenPos, headOnScreen = workspace.CurrentCamera:WorldToScreenPoint(headPos); local onScreen = rootOnScreen or headOnScreen; for _, item in pairs(espItems) do item.Visible = onScreen end; if not onScreen then continue end; local boxSizeY = math.abs(headScreenPos.Y - rootScreenPos.Y); local boxSizeX = boxSizeY / 2; espItems.Box.Size = Vector2.new(boxSizeX, boxSizeY); espItems.Box.Position = Vector2.new(rootScreenPos.X - boxSizeX / 2, headScreenPos.Y); espItems.Name.Position = Vector2.new(headScreenPos.X, headScreenPos.Y - 20); espItems.Distance.Position = Vector2.new(rootScreenPos.X, rootScreenPos.Y + 5); local healthPct = humanoid.Health / humanoid.MaxHealth; espItems.Health.From = Vector2.new(rootScreenPos.X - boxSizeX / 2 - 5, rootScreenPos.Y); espItems.Health.To = Vector2.new(rootScreenPos.X - boxSizeX / 2 - 5, headScreenPos.Y + (boxSizeY * (1 - healthPct))); local isDowned = character:GetAttribute("Downed"); local mainColor = (Config.DownedPlayerESP and isDowned) and Config.DownedPlayerColor or Config.PlayerESPColor; espItems.Box.Color, espItems.Name.Color, espItems.Distance.Color = mainColor, mainColor, mainColor; espItems.Name.Text, espItems.Distance.Text = player.Name, math.floor(GetDistanceFromPlayer(rootPos)) .. "m"; espItems.Health.Color = Color3.fromHSV(0.33 * healthPct, 1, 1); espItems.Name.Visible = Config.PlayerNames; espItems.Distance.Visible = Config.PlayerDistance; espItems.Health.Visible = Config.PlayerHealth end end end
function EnablePlayerESP(state) if state then playerESPConnection = RunService.RenderStepped:Connect(UpdatePlayerESP) else if playerESPConnection then playerESPConnection:Disconnect(); playerESPConnection = nil end for name, items in pairs(playerESPObjects) do for _, item in pairs(items) do item:Remove() end end playerESPObjects = {} end end
function EnableTicketESP(state) if state then ticketESPConnection = RunService.RenderStepped:Connect(function() local ticketFolder = workspace.Game.Effects:FindFirstChild("Tickets"); if not ticketFolder then return end; for _, ticket in pairs(ticketFolder:GetChildren()) do local ticketId = ticket:GetFullName(); if not ticketESPObjects[ticketId] then ticketESPObjects[ticketId] = { Name = Drawing.new("Text") }; local esp = ticketESPObjects[ticketId]; esp.Name.Size, esp.Name.Center, esp.Name.Outline, esp.Name.Font, esp.Name.Text, esp.Name.Color = 16, true, true, 2, "Ticket", Color3.fromRGB(41,180,255) end; local esp = ticketESPObjects[ticketId]; local hrp = ticket:FindFirstChild("HumanoidRootPart"); if hrp then local pos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(hrp.Position); esp.Name.Visible = onScreen; if onScreen then esp.Name.Position = Vector2.new(pos.X, pos.Y) end end end end) else if ticketESPConnection then ticketESPConnection:Disconnect(); ticketESPConnection = nil end; for id, item in pairs(ticketESPObjects) do item.Name:Remove() end; ticketESPObjects = {} end end

-- Core Logic
function ChangeSkin(skinName) local char = LocalPlayer.Character; if not char then return end; local skinFolder = ReplicatedStorage:FindFirstChild("Skins") or ReplicatedStorage:FindFirstChild("Characters"); local skinModel = skinFolder and skinFolder:FindFirstChild(skinName); if not skinModel then WindUI:Notify({ Title = "Skin Changer", Content = "Could not find skin: " .. skinName, Icon = "alert-triangle", Duration = 3 }); return end; local hum = char:FindFirstChildOfClass("Humanoid"); if hum then hum:ApplyDescription(skinModel:FindFirstChildOfClass("Humanoid"):GetAppliedDescription()); WindUI:Notify({ Title = "Skin Changer", Content = "Applied skin: " .. skinName, Icon = "check", Duration = 3 }) end end
function UpdateCustomSkin() local char = LocalPlayer.Character; if not char then return end; for _, part in pairs(char:GetDescendants()) do if part:IsA("BasePart") then local name = part.Name:lower(); if name:find("head") then part.Color, part.Material = Config.CustomSkinProps.HeadColor, Config.CustomSkinProps.HeadMaterial elseif name:find("torso") then part.Color, part.Material = Config.CustomSkinProps.TorsoColor, Config.CustomSkinProps.BodyMaterial elseif name:find("left") and name:find("arm") then part.Color, part.Material = Config.CustomSkinProps.LeftArmColor, Config.CustomSkinProps.BodyMaterial elseif name:find("right") and name:find("arm") then part.Color, part.Material = Config.CustomSkinProps.RightArmColor, Config.CustomSkinProps.BodyMaterial elseif name:find("left") and name:find("leg") then part.Color, part.Material = Config.CustomSkinProps.LeftLegColor, Config.CustomSkinProps.BodyMaterial elseif name:find("right") and name:find("leg") then part.Color, part.Material = Config.CustomSkinProps.RightLegColor, Config.CustomSkinProps.BodyMaterial end end end end
function EnableSkinChanger() if not skinChangerConnection then skinChangerConnection = LocalPlayer.CharacterAdded:Connect(function(char) task.wait(1); if Config.SkinChanger then if Config.CustomSkinEnabled then UpdateCustomSkin() else ChangeSkin(Config.SelectedSkin) end end end) end; if LocalPlayer.Character then if Config.CustomSkinEnabled then UpdateCustomSkin() else ChangeSkin(Config.SelectedSkin) end end end
function DisableSkinChanger() if skinChangerConnection then skinChangerConnection:Disconnect(); skinChangerConnection = nil end end
function EnableAutoCollect(state) if state then autoCollectConnection = RunService.Heartbeat:Connect(function() local pos = GetPlayerPosition(); if not pos then return end; for _, item in pairs(workspace:GetDescendants()) do if (item.Name:find("Coin") or item.Name:find("Item") or item.Name:find("Pickup")) and (item:IsA("Part") or item:IsA("Model")) then local itemPos = item:IsA("Part") and item.Position or item.PrimaryPart and item.PrimaryPart.Position; if itemPos and (itemPos - pos).Magnitude < 25 then local remote = ReplicatedStorage:FindFirstChild("CollectItem") or ReplicatedStorage:FindFirstChild("Collect"); if remote then remote:FireServer(item) end end end end end) else if autoCollectConnection then autoCollectConnection:Disconnect(); autoCollectConnection = nil end end end
function EnableAutoRevive(state) if state then autoReviveConnection = RunService.Heartbeat:Connect(function() local pos = GetPlayerPosition(); if not pos then return end; for _, plr in pairs(Players:GetPlayers()) do if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then local hum = plr.Character:FindFirstChildOfClass("Humanoid"); local isDowned = hum and hum.Health > 0 and (plr.Character:FindFirstChild("Downed") or hum:GetState() == Enum.HumanoidStateType.Physics); if isDowned and (plr.Character.HumanoidRootPart.Position - pos).Magnitude < 15 then local remote = ReplicatedStorage:FindFirstChild("RevivePlayer") or ReplicatedStorage:FindFirstChild("Revive"); if remote then remote:FireServer(plr) end end end end end) else if autoReviveConnection then autoReviveConnection:Disconnect(); autoReviveConnection = nil end end end
function EnableFullbright(state) if state then Lighting.Brightness, Lighting.ClockTime, Lighting.FogEnd, Lighting.GlobalShadows, Lighting.Ambient = 2, 14, 100000, false, Color3.fromRGB(200, 200, 200) else Lighting.Brightness, Lighting.ClockTime, Lighting.FogEnd, Lighting.GlobalShadows, Lighting.Ambient = originalLightingSettings.Brightness, originalLightingSettings.ClockTime, originalLightingSettings.FogEnd, originalLightingSettings.GlobalShadows, originalLightingSettings.Ambient end end
function EnableNoCooldowns(state) if state then local mt = getrawmetatable(game); local oldIndex = mt.__index; if setreadonly then setreadonly(mt, false) end; mt.__index = newcclosure(function(self, key) if tostring(key):lower():find("cooldown") then return 0 end return oldIndex(self, key) end); if setreadonly then setreadonly(mt, true) end end end
function EnableAntiRagdoll(state) if state then antiRagdollConnection = RunService.Heartbeat:Connect(function() if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then local hum = LocalPlayer.Character.Humanoid; if hum:GetState() == Enum.HumanoidStateType.Physics or hum:GetState() == Enum.HumanoidStateType.Ragdoll then hum:ChangeState(Enum.HumanoidStateType.GettingUp) end end end) else if antiRagdollConnection then antiRagdollConnection:Disconnect(); antiRagdollConnection = nil end end end
function EnableAutoCrouch(state) if state then autoCrouchConnection = RunService.Heartbeat:Connect(function() local isEntityNear = false; for _, entity in pairs(GetEntities()) do if GetDistanceFromPlayer(entity.HumanoidRootPart.Position) < 20 then isEntityNear = true; break end end; if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.Sit = isEntityNear end end) else if autoCrouchConnection then autoCrouchConnection:Disconnect(); autoCrouchConnection = nil end; if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.Sit = false end end end
function UpdateSpeedHack() if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.WalkSpeed = 16 * Config.SpeedMultiplier end end
function EnableSpeedHack(state) if state then if not speedHackConnection then speedHackConnection = LocalPlayer.CharacterAdded:Connect(function() task.wait(0.5); if Config.SpeedHack then UpdateSpeedHack() end end) end; UpdateSpeedHack() else if speedHackConnection then speedHackConnection:Disconnect(); speedHackConnection = nil end; if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.WalkSpeed = 16 end end end
function UpdateJumpHack() if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.JumpPower = 50 * Config.JumpMultiplier end end
function EnableJumpHack(state) if state then if not jumpHackConnection then jumpHackConnection = LocalPlayer.CharacterAdded:Connect(function() task.wait(0.5); if Config.JumpHack then UpdateJumpHack() end end) end; UpdateJumpHack() else if jumpHackConnection then jumpHackConnection:Disconnect(); jumpHackConnection = nil end; if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then LocalPlayer.Character.Humanoid.JumpPower = 50 end end end
function TeleportTo(position) if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(position) + Vector3.new(0, 3, 0) end end
function TeleportToSafeZone(zoneName) local mapFolder = workspace:FindFirstChild("Map") or workspace:FindFirstChild(workspace.Game and workspace.Game.MapName.Value or ""); if mapFolder then local zonePart = mapFolder:FindFirstChild(zoneName, true); if zonePart and (zonePart:IsA("BasePart") or zonePart.PrimaryPart) then TeleportTo(zonePart:IsA("BasePart") and zonePart.Position or zonePart.PrimaryPart.Position); WindUI:Notify({Title = "Teleport", Content = "Teleported to " .. zoneName, Icon = "move", Duration = 3}) else WindUI:Notify({Title = "Teleport", Content = "Could not find zone: " .. zoneName, Icon = "alert-triangle", Duration = 3}) end end end
function EnableAntiAFK(state) if state then if not antiAFKConnection then antiAFKConnection = LocalPlayer.Idled:Connect(function() VirtualUser:CaptureController(); VirtualUser:ClickButton2(Vector2.new()) end) end else if antiAFKConnection then antiAFKConnection:Disconnect(); antiAFKConnection = nil end end end
function ManualRespawn() ReplicatedStorage.Events.Player.ChangePlayerMode:FireServer(true) end

-- Farm Script Logic
function revive_farm() local downedplr = GetDownedPlr(); if downedplr and downedplr:FindFirstChild('HumanoidRootPart') and LocalPlayer.Character then workspace.Game.Settings:SetAttribute("ReviveTime", 0.1); LocalPlayer.Character.HumanoidRootPart.CFrame = downedplr.HumanoidRootPart.CFrame + Vector3.new(0,3,0); task.wait(); ReplicatedStorage.Events.Character.Interact:FireServer("Revive", nil, tostring(downedplr)); ReplicatedStorage.Events.Character.Interact:FireServer("Revive", true, tostring(downedplr)) end end
task.spawn(function() while task.wait(0.2) do if Config.AutoRespawn and LocalPlayer.Character and LocalPlayer.Character:GetAttribute("Downed") then ManualRespawn() end; if Config.MoneyFarm then if LocalPlayer:GetAttribute("InMenu") and not LocalPlayer:GetAttribute("Dead") then ManualRespawn() end; if LocalPlayer.Character and LocalPlayer.Character:GetAttribute("Downed") then ManualRespawn(); task.wait(1) else revive_farm() end end; if Config.AFKFarm and not Config.MoneyFarm and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(6007, 7005, 8005) end; if Config.TicketFarm then if not LocalPlayer:GetAttribute('InMenu') and not LocalPlayer:GetAttribute('Dead') and LocalPlayer.Character then local ticketFolder = workspace.Game.Effects:FindFirstChild("Tickets"); if ticketFolder and #ticketFolder:GetChildren() > 0 then LocalPlayer.Character.HumanoidRootPart.CFrame = ticketFolder:GetChildren()[1].HumanoidRootPart.CFrame end else task.wait(1); ManualRespawn() end; if LocalPlayer.Character and LocalPlayer.Character:GetAttribute("Downed") then ManualRespawn() end end end end)

-- Fly Logic & Mobile GUI
local FlyGUI, flyLoop, FLYING, BV, BG; local CONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0}
function CreateMobileFlyGUI() if FlyGUI then return end; FlyGUI = Instance.new("ScreenGui", game.CoreGui); FlyGUI.Name = "FlyControls"; FlyGUI.ResetOnSpawn = false; FlyGUI.Enabled = false; local Main = Instance.new("Frame", FlyGUI); Main.Size = UDim2.new(0, 180, 0, 180); Main.Position = UDim2.new(0, 10, 1, -190); Main.BackgroundTransparency = 1; local function CreateButton(name, pos, size, text) local btn = Instance.new("TextButton", Main); btn.Size = UDim2.new(0, size.X, 0, size.Y); btn.Position = UDim2.fromOffset(pos.X, pos.Y); btn.BackgroundColor3 = Color3.new(0,0,0); btn.BackgroundTransparency = 0.5; btn.TextColor3 = Color3.new(1,1,1); btn.Text = text; btn.Font = Enum.Font.SourceSansBold; btn.TextSize = 24; btn.Name = name; btn.AutoButtonColor = false; return btn end; local W = CreateButton("W", Vector2.new(60,0), Vector2.new(60,60), "W"); local S = CreateButton("S", Vector2.new(60,120), Vector2.new(60,60), "S"); local A = CreateButton("A", Vector2.new(0,60), Vector2.new(60,60), "A"); local D = CreateButton("D", Vector2.new(120,60), Vector2.new(60,60), "D"); local Up = CreateButton("Up", Vector2.new(200, 40), Vector2.new(50,50), "U"); local Down = CreateButton("Down", Vector2.new(200, 100), Vector2.new(50,50), "D"); local function handlePress(btn, dir, val) btn.InputBegan:Connect(function() CONTROL[dir] = val end); btn.InputEnded:Connect(function() CONTROL[dir] = 0 end) end; handlePress(W, "F", 1); handlePress(S, "B", -1); handlePress(A, "L", -1); handlePress(D, "R", 1); handlePress(Up, "Q", 1); handlePress(Down, "E", -1) end
function EnableFly(state)
    if state then if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end; FLYING = true; local HRP = LocalPlayer.Character.HumanoidRootPart; BV = Instance.new("BodyVelocity", HRP); BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge); BG = Instance.new("BodyGyro", HRP); BG.MaxTorque = Vector3.new(math.huge, math.huge, math.huge); BG.P = 50000; if UserInputService.TouchEnabled then CreateMobileFlyGUI(); FlyGUI.Enabled = true end; flyLoop = RunService.RenderStepped:Connect(function() if not FLYING then return end; LocalPlayer.Character.Humanoid.PlatformStand = true; BG.CFrame = workspace.CurrentCamera.CFrame; local speed = Config.FlySpeed; local vel = ((BG.CFrame.lookVector * (CONTROL.F + CONTROL.B)) + (BG.CFrame.rightVector * (CONTROL.L + CONTROL.R)) + (BG.CFrame.upVector * (CONTROL.Q + CONTROL.E))) * speed; BV.Velocity = vel end)
    else FLYING = false; if flyLoop then flyLoop:Disconnect() flyLoop = nil end; if LocalPlayer.Character then LocalPlayer.Character.Humanoid.PlatformStand = false; if BV then BV:Destroy() end; if BG then BG:Destroy() end end; if FlyGUI then FlyGUI.Enabled = false end; CONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0} end
UserInputService.InputBegan:Connect(function(input) if not UserInputService:GetFocusedTextBox() and FLYING then if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 1 elseif input.KeyCode == Enum.KeyCode.S then CONTROL.B = -1 elseif input.KeyCode == Enum.KeyCode.A then CONTROL.L = -1 elseif input.KeyCode == Enum.KeyCode.D then CONTROL.R = 1 elseif input.KeyCode == Enum.KeyCode.E then CONTROL.Q = 1 elseif input.KeyCode == Enum.KeyCode.Q then CONTROL.E = -1 end end end)
UserInputService.InputEnded:Connect(function(input) if FLYING then if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 0 elseif input.KeyCode == Enum.KeyCode.S then CONTROL.B = 0 elseif input.KeyCode == Enum.KeyCode.A then CONTROL.L = 0 elseif input.KeyCode == Enum.KeyCode.D then CONTROL.R = 0 elseif input.KeyCode == Enum.KeyCode.E then CONTROL.Q = 0 elseif input.KeyCode == Enum.KeyCode.Q then CONTROL.E = 0 end end end)
end

--[[ UI DEFINITION ]]--
local MainTab = Window:Tab({ Title = "Main", Icon = "home" })
local FarmsTab = Window:Tab({ Title = "Farms", Icon = "dollar-sign" })
local ESPTab = Window:Tab({ Title = "ESP", Icon = "eye" })
local SkinTab = Window:Tab({ Title = "Skins", Icon = "shirt" })
local FeaturesTab = Window:Tab({ Title = "Features", Icon = "sparkles" })
local CharacterTab = Window:Tab({ Title = "Character", Icon = "user-cog" })
local GameTab = Window:Tab({ Title = "Game", Icon = "gamepad-2" })
local TeleportTab = Window:Tab({ Title = "Teleports", Icon = "move" })
local ProtectionTab = Window:Tab({ Title = "Protection", Icon = "shield" })
local InfoTab = Window:Tab({ Title = "Information", Icon = "badge-info" })
local SettingTab = Window:Tab({ Title = "Settings", Icon = "settings" })
Window:SelectTab(1)

-- Main Tab
MainTab:Section({ Title = "Welcome to Cryonix team", TextXAlignment = "Center", TextSize = 17 }); MainTab:Paragraph({ Title = "Evade Script", Desc = "This script is made by Cryonix team made by good ."}); MainTab:Button({ Title = "Copy Discord Invite", Callback = function() setclipboard("https://discord.gg/2XhZ7CngTh"); WindUI:Notify({Title="Copied!", Content="Invite link copied to clipboard.", Icon="check"}) end }); local gameState, mapName = "Unknown", "Unknown"; if workspace:FindFirstChild("Game") then if workspace.Game:FindFirstChild("GameState") then gameState = workspace.Game.GameState.Value end if workspace.Game:FindFirstChild("MapName") then mapName = workspace.Game.MapName.Value end end; local gameInfo = MainTab:Paragraph({ Title = "Game Info", Desc = "State: " .. gameState .. "\nMap: " .. mapName }); if workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("GameState") then workspace.Game.GameState.Changed:Connect(function(newState) local newMap = (workspace.Game:FindFirstChild("MapName") and workspace.Game.MapName.Value or "Unknown"); gameInfo:SetDesc("State: " .. newState .. "\nMap: " .. newMap) end) end

-- Farms Tab
FarmsTab:Section({ Title = "Automatic Farms" }); UIElements.MoneyFarm = FarmsTab:Toggle({ Title = "Money Farm (Auto Revive)", Desc = "Automatically revives players to earn money.", Default = Config.MoneyFarm, Callback = function(s) Config.MoneyFarm = s end }); UIElements.TicketFarm = FarmsTab:Toggle({ Title = "Ticket Farm", Desc = "Automatically collects tickets around the map.", Default = Config.TicketFarm, Callback = function(s) Config.TicketFarm = s end }); UIElements.AFKFarm = FarmsTab:Toggle({ Title = "AFK Farm (Safe Spot)", Desc = "Teleports you to a safe spot. Disable other farms.", Default = Config.AFKFarm, Callback = function(s) Config.AFKFarm = s end })

-- ESP Tab
ESPTab:Section({ Title = "Entity & Bot ESP" }); UIElements.EntityESP = ESPTab:Toggle({ Title = "Enable Entity/Bot ESP", Icon="target", Default = Config.EntityESP, Callback = function(s) Config.EntityESP = s; EnableEntityESP(s) end }); UIElements.EntityDistance = ESPTab:Toggle({ Title = "Show Distance", Default = Config.EntityDistance, Callback = function(s) Config.EntityDistance = s end }); UIElements.EntityESPColor = ESPTab:Colorpicker({ Title = "Entity Color", Default = Config.EntityESPColor, Callback = function(c) Config.EntityESPColor = c end })
ESPTab:Divider(); ESPTab:Section({ Title = "Player ESP" }); UIElements.PlayerESP = ESPTab:Toggle({ Title = "Enable Player ESP", Icon="users", Default = Config.PlayerESP, Callback = function(s) Config.PlayerESP = s; EnablePlayerESP(s) end }); UIElements.PlayerNames = ESPTab:Toggle({ Title = "Show Names", Default = Config.PlayerNames, Callback = function(s) Config.PlayerNames = s end }); UIElements.PlayerDistance = ESPTab:Toggle({ Title = "Show Distance", Default = Config.PlayerDistance, Callback = function(s) Config.PlayerDistance = s end }); UIElements.PlayerHealth = ESPTab:Toggle({ Title = "Show Health", Default = Config.PlayerHealth, Callback = function(s) Config.PlayerHealth = s end }); UIElements.PlayerESPColor = ESPTab:Colorpicker({ Title = "Player Color", Default = Config.PlayerESPColor, Callback = function(c) Config.PlayerESPColor = c end })
ESPTab:Divider(); ESPTab:Section({ Title = "Special ESP" }); UIElements.DownedPlayerESP = ESPTab:Toggle({ Title = "Highlight Downed Players", Default = Config.DownedPlayerESP, Callback = function(s) Config.DownedPlayerESP = s end }); UIElements.DownedPlayerColor = ESPTab:Colorpicker({ Title = "Downed Player Color", Default = Config.DownedPlayerColor, Callback = function(c) Config.DownedPlayerColor = c end }); UIElements.TicketESP = ESPTab:Toggle({ Title = "Ticket ESP", Default = Config.TicketESP, Callback = function(s) Config.TicketESP = s; EnableTicketESP(s) end })

-- Skin Tab
local availableSkins = {"Dawn", "Dex", "Chip", "Ambush", "A-60", "Seeks", "Rush", "Smiler"}; local skinFolder = ReplicatedStorage:FindFirstChild("Skins") or ReplicatedStorage:FindFirstChild("Characters"); if skinFolder then availableSkins = {}; for _, skin in pairs(skinFolder:GetChildren()) do if skin:IsA("Model") then table.insert(availableSkins, skin.Name) end end end
SkinTab:Section({ Title = "Character Skins" }); UIElements.SkinChanger = SkinTab:Toggle({ Title = "Enable Skin Changer", Default = Config.SkinChanger, Callback = function(s) Config.SkinChanger = s; if s then EnableSkinChanger() else DisableSkinChanger() end end }); UIElements.SelectedSkin = SkinTab:Dropdown({ Title = "Select Skin", Values = availableSkins, Value = Config.SelectedSkin, Callback = function(v) Config.SelectedSkin = v; if Config.SkinChanger and not Config.CustomSkinEnabled then ChangeSkin(v) end end }); SkinTab:Button({ Title = "Apply Selected Skin", Callback = function() if Config.SkinChanger and not Config.CustomSkinEnabled then ChangeSkin(Config.SelectedSkin) end end })
SkinTab:Divider(); SkinTab:Section({ Title = "Custom Skin Creator" }); UIElements.CustomSkinEnabled = SkinTab:Toggle({ Title = "Enable Custom Skin", Default = Config.CustomSkinEnabled, Callback = function(s) Config.CustomSkinEnabled = s; if s and Config.SkinChanger then UpdateCustomSkin() end end }); UIElements.HeadColor = SkinTab:Colorpicker({ Title = "Head Color", Default = Config.CustomSkinProps.HeadColor, Callback = function(c) Config.CustomSkinProps.HeadColor = c; if Config.CustomSkinEnabled then UpdateCustomSkin() end end }); UIElements.TorsoColor = SkinTab:Colorpicker({ Title = "Torso Color", Default = Config.CustomSkinProps.TorsoColor, Callback = function(c) Config.CustomSkinProps.TorsoColor = c; if Config.CustomSkinEnabled then UpdateCustomSkin() end end }); UIElements.ArmsColor = SkinTab:Colorpicker({ Title = "Arms Color", Default = Config.CustomSkinProps.LeftArmColor, Callback = function(c) Config.CustomSkinProps.LeftArmColor, Config.CustomSkinProps.RightArmColor = c, c; if Config.CustomSkinEnabled then UpdateCustomSkin() end end }); UIElements.LegsColor = SkinTab:Colorpicker({ Title = "Legs Color", Default = Config.CustomSkinProps.LeftLegColor, Callback = function(c) Config.CustomSkinProps.LeftLegColor, Config.CustomSkinProps.RightLegColor = c, c; if Config.CustomSkinEnabled then UpdateCustomSkin() end end }); UIElements.BodyMaterial = SkinTab:Dropdown({ Title = "Body Material", Values = {"Plastic", "Metal", "Neon", "Glass", "ForceField", "Foil"}, Value = "Plastic", Callback = function(v) local mat = Enum.Material[v]; Config.CustomSkinProps.BodyMaterial, Config.CustomSkinProps.HeadMaterial = mat, mat; if Config.CustomSkinEnabled then UpdateCustomSkin() end end })

-- Features Tab
FeaturesTab:Section({ Title = "Auto Features" }); UIElements.AutoCollect = FeaturesTab:Toggle({ Title = "Auto Collect Items", Default = Config.AutoCollect, Callback = function(s) Config.AutoCollect = s; EnableAutoCollect(s) end }); UIElements.AutoRevive = FeaturesTab:Toggle({ Title = "Auto Revive Teammates (Non-Farm)", Default = Config.AutoRevive, Callback = function(s) Config.AutoRevive = s; EnableAutoRevive(s) end })
FeaturesTab:Divider(); FeaturesTab:Section({ Title = "Utility" }); UIElements.Fullbright = FeaturesTab:Toggle({ Title = "Fullbright (Nexus)", Default = Config.Fullbright, Callback = function(s) Config.Fullbright = s; EnableFullbright(s) end }); UIElements.NoCooldowns = FeaturesTab:Toggle({ Title = "No Cooldowns", Desc="May require rejoining to disable fully.", Default = Config.NoCooldowns, Callback = function(s) Config.NoCooldowns = s; EnableNoCooldowns(s) end }); UIElements.AntiRagdoll = FeaturesTab:Toggle({ Title = "Anti-Ragdoll", Default = Config.AntiRagdoll, Callback = function(s) Config.AntiRagdoll = s; EnableAntiRagdoll(s) end }); UIElements.AutoCrouch = FeaturesTab:Toggle({ Title = "Auto Crouch Near Entities", Default = Config.AutoCrouch, Callback = function(s) Config.AutoCrouch = s; EnableAutoCrouch(s) end })

-- Character Tab
CharacterTab:Section({ Title = "Movement Mods" }); UIElements.SpeedHack = CharacterTab:Toggle({ Title = "Speed Hack (Walkspeed)", Default = Config.SpeedHack, Callback = function(s) Config.SpeedHack = s; EnableSpeedHack(s) end }); UIElements.SpeedMultiplier = CharacterTab:Slider({ Title = "Speed Multiplier", Value = { Min = 1, Max = 5, Default = Config.SpeedMultiplier }, Step = 0.1, Callback = function(v) Config.SpeedMultiplier = v; if Config.SpeedHack then UpdateSpeedHack() end end }); UIElements.JumpHack = CharacterTab:Toggle({ Title = "Jump Hack", Default = Config.JumpHack, Callback = function(s) Config.JumpHack = s; EnableJumpHack(s) end }); UIElements.JumpMultiplier = CharacterTab:Slider({ Title = "Jump Multiplier", Value = { Min = 1, Max = 5, Default = Config.JumpMultiplier }, Step = 0.1, Callback = function(v) Config.JumpMultiplier = v; if Config.JumpHack then UpdateJumpHack() end end }); 
UIElements.Fly = CharacterTab:Toggle({ Title = "Fly", Default = Config.Fly, Callback = function(s) Config.Fly = s; EnableFly(s) end });
UIElements.FlySpeed = CharacterTab:Slider({ Title = "Fly Speed", Value = { Min = 10, Max = 200, Default = Config.FlySpeed }, Step = 5, Callback = function(v) Config.FlySpeed = v; end });
CharacterTab:Divider(); CharacterTab:Section({ Title = "Player Actions" }); UIElements.AutoRespawn = CharacterTab:Toggle({ Title = "Auto Respawn When Downed", Default = Config.AutoRespawn, Callback = function(s) Config.AutoRespawn = s end }); CharacterTab:Button({ Title = "Manual Respawn", Callback = ManualRespawn })

-- Game Tab
GameTab:Section({ Title = "World" }); GameTab:Button({ Title = "Full Bright", Callback = function() Lighting.Brightness = 4; Lighting.FogEnd = 100000; Lighting.GlobalShadows = false; Lighting.ClockTime = 12 end }); GameTab:Button({ Title = "Remove Barriers", Callback = function() if workspace.Game.Map:FindFirstChild("InvisParts") then workspace.Game.Map.InvisParts:ClearAllChildren() end end }); GameTab:Button({ Title = "Rejoin Server", Callback = function() if #Players:GetPlayers() <= 1 then TeleportService:Teleport(game.PlaceId, LocalPlayer) else TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer) end end })

-- Teleport Tab
TeleportTab:Section({ Title = "Safe Zones" }); local safeZones = {"Safe Room", "Spawn", "Lobby"}; if mapName == "Abandoned Prison" then safeZones = {"Cafeteria", "Guard Room", "Cell Block"} elseif mapName == "Factory" then safeZones = {"Office", "Warehouse", "Control Room"} elseif mapName == "Mansion" then safeZones = {"Master Bedroom", "Dining Room", "Kitchen"} end; for _, zone in pairs(safeZones) do TeleportTab:Button({ Title = "Teleport to " .. zone, Callback = function() TeleportToSafeZone(zone) end }) end
TeleportTab:Divider(); TeleportTab:Section({ Title = "Player Teleports" }); local playerList = {}; for _, p in pairs(Players:GetPlayers()) do if p ~= LocalPlayer then table.insert(playerList, p.Name) end end; local playerDropdown = TeleportTab:Dropdown({ Title = "Select Player", Values = playerList, AllowNone = true, Callback = function(playerName) local target = Players:FindFirstChild(playerName); if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then TeleportTo(target.Character.HumanoidRootPart.Position); WindUI:Notify({Title = "Teleport", Content = "Teleported to " .. playerName, Icon = "move", Duration = 3}) end end }); Players.PlayerAdded:Connect(function(p) table.insert(playerList, p.Name); playerDropdown:SetValues(playerList) end); Players.PlayerRemoving:Connect(function(p) for i, name in ipairs(playerList) do if name == p.Name then table.remove(playerList, i); break end end; playerDropdown:SetValues(playerList) end)

-- Protection Tab
ProtectionTab:Section({ Title = "Anti-Detection" }); UIElements.AntiAFK = ProtectionTab:Toggle({ Title = "Anti-AFK", Default = Config.AntiAFK, Callback = function(s) Config.AntiAFK = s; EnableAntiAFK(s) end })

-- Info Tab
InfoTab:Section({ Title = "Cryonix", TextXAlignment = "Center", TextSize = 17 }); InfoTab:Paragraph({ Title = "Main Founder", Desc = "c9dev,yuri", Image = "rbxassetid://136640007085656", ImageSize = 30 }); InfoTab:Paragraph({ Title = "made by", Desc ="Good", Image = "rbxassetid://136640007085656", ImageSize = 30 }); InfoTab:Paragraph({ Title = "Discord", Desc = "Join our discord for more scripts!", Buttons = {{ Icon = "copy", Title = "Copy Link", Callback = function() setclipboard("https://discord.gg/2XhZ7CngTh") end }} })

-- Settings Tab
SettingTab:Divider(); SettingTab:Section({ Title = "UI Settings", TextXAlignment = "Center", TextSize = 20 }); SettingTab:Divider(); SettingTab:Dropdown({ Title = "Window Theme", Values = themes, Value = "Midnight Blue", Callback = function(selectedTheme) WindUI:SetTheme(selectedTheme) end }); SettingTab:Keybind({ Title = "Change MinimizeKey", Value = "RightShift", Callback = function(v) Window:SetToggleKey(Enum.KeyCode[v]) end }); SettingTab:Toggle({ Title = "Transparency", Icon = "eye", Default = getgenv().TransparencyEnabled, Callback = function(s) getgenv().TransparencyEnabled = s; Window:ToggleTransparency(s) end }); SettingTab:Button({ Title = "Unload Script", Desc = "Destroys the UI", Callback = function() Window:Destroy(); if FlyGUI then FlyGUI:Destroy() end end }); SettingTab:Divider(); SettingTab:Button({ Title = "Reset All Settings", Desc = "Resets all settings for this session.", Callback = function() for k, v in pairs(DefaultConfig) do Config[k] = v end; WindUI:Notify({ Title = "Settings Reset", Content = "Please re-toggle features to apply default settings.", Icon = "refresh-cw", Duration = 4 }) end })

-- Initializing Features
task.spawn(function()
    wait(1)
    EnableEntityESP(Config.EntityESP)
    EnablePlayerESP(Config.PlayerESP)
    if Config.SkinChanger then EnableSkinChanger() end
    EnableAutoCollect(Config.AutoCollect)
    EnableAutoRevive(Config.AutoRevive)
    EnableFullbright(Config.Fullbright)
    if Config.NoCooldowns then EnableNoCooldowns(true) end
    EnableAntiRagdoll(Config.AntiRagdoll)
    EnableAutoCrouch(Config.AutoCrouch)
    EnableSpeedHack(Config.SpeedHack)
    EnableJumpHack(Config.JumpHack)
    EnableAntiAFK(Config.AntiAFK)
    EnableTicketESP(Config.TicketESP)
    EnableFly(Config.Fly)
end)
